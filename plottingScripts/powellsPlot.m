function [figHandle] = powellsPlot(CoMPos, EulAng_rad, tsc, params, timeIndex, figNum)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here

% close all

rayLength = 50;

cameraPosVecs   = {'sideCamPosVec_cm','botCamPosVec_cm','slntCamPosVec_cm'};
cameraNames     = {'sideCamPosVec','botCamPosVec','slntCamPosVec'};
unitVecNames    = {'uCentroidSide','uCentroidBotA','uCentroidBotB','uCentroidSlant'};
rayBaseVecNames = {'rCentroidSide','rCentroidBotA','rCentroidBotB','rCentroidSlant'};
% rayOutVecNames = {'rogGSide','rogGBotA','rogGBotB','rogGSlant'};
dotVecBFNames  = {'sideDotPosVec_cm','botADotPosVec_cm','botBDotPosVec_cm'};
dotBFName = {'sideDotPosVec','botADotPosVec','botBDotPosVec'};
marker = {'o','*','+','.'};

figHandle = figure(figNum);
set(gca,'NextPlot','add')
for ii = 1:length(cameraPosVecs)
    scatter3(...
       params.(cameraPosVecs{ii}).Value(1),...
       params.(cameraPosVecs{ii}).Value(2),...
       params.(cameraPosVecs{ii}).Value(3),...
       'Marker',marker{ii},'CData',[0 0 0],'DisplayName',cameraNames{ii});
end


for ii = 1:length(unitVecNames)
    scatter3(...
       tsc.(rayBaseVecNames{ii}).Data(1,:,timeIndex),...
       tsc.(rayBaseVecNames{ii}).Data(2,:,timeIndex),...
       tsc.(rayBaseVecNames{ii}).Data(3,:,timeIndex),...
       'Marker',marker{ii},'CData',[0 0 1],'DisplayName',rayBaseVecNames{ii});
   plot3(...
       [tsc.(rayBaseVecNames{ii}).Data(1,:,timeIndex) tsc.(rayBaseVecNames{ii}).Data(1,:,timeIndex)+rayLength*tsc.(unitVecNames{ii}).Data(1,:,timeIndex)],...
       [tsc.(rayBaseVecNames{ii}).Data(2,:,timeIndex) tsc.(rayBaseVecNames{ii}).Data(2,:,timeIndex)+rayLength*tsc.(unitVecNames{ii}).Data(2,:,timeIndex)],...
       [tsc.(rayBaseVecNames{ii}).Data(3,:,timeIndex) tsc.(rayBaseVecNames{ii}).Data(3,:,timeIndex)+rayLength*tsc.(unitVecNames{ii}).Data(3,:,timeIndex)],...
       'LineStyle','--','LineWidth',1,'Color','k','DisplayName','Ray Line');
end

scatter3(...
        CoMPos(1),...
        CoMPos(2),...
        CoMPos(3),...
        'Marker','x','CData',[0 0 1],'DisplayName','CoM Pos');

RGB = calculateRotationMatrix(EulAng_rad(1),EulAng_rad(2),EulAng_rad(3));
RBG = RGB';

line = {'-','--',':'};

for ii = 1:length(dotVecBFNames)
%     scatter3(...
%         tsc.(dotPosVecNames{ii}).Data(1,:,timeIndex),...
%         tsc.(dotPosVecNames{ii}).Data(2,:,timeIndex),...
%         tsc.(dotPosVecNames{ii}).Data(3,:,timeIndex),...
%         'Marker','o','CData',[0 1 0],'DisplayName','Dot Pos');
    
    dotVecGF = RBG * params.(dotVecBFNames{ii}).Value';
    
    plot3(...
        [CoMPos(1) CoMPos(1)+dotVecGF(1)],...
        [CoMPos(2) CoMPos(2)+dotVecGF(2)],...
        [CoMPos(3) CoMPos(3)+dotVecGF(3)],...
       'LineStyle',line{ii},'LineWidth',1,'Color','r','DisplayName',dotBFName{ii});
end

names = {'x','y','z'};

for ii = 1:3
    plot3(...
        [CoMPos(1) CoMPos(1)+10*RBG(1,ii)],...
        [CoMPos(2) CoMPos(2)+10*RBG(2,ii)],...
        [CoMPos(3) CoMPos(3)+10*RBG(3,ii)],...
       'LineStyle',line{ii},'LineWidth',1,'Color','g','DisplayName',names{ii});
end

legend
grid on
axis equal
axis square
xlabel('x')
ylabel('y')
zlabel('z')

end

