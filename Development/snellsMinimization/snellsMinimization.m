function [x] = snellsMinimization(x0,CoMPos,rCentroidSide,rCentroidBotA,...
    rCentroidBotB,rCentroidSlant,uCentroidSide,...
    uCentroidBotA,uCentroidBotB,uCentroidSlant,...
    sideDotPosVec_cm,botADotPosVec_cm,botBDotPosVec_cm)

%SNELLSMINIMIZATION Summary of this function goes here
%   Detailed explanation goes here

% x_0 = [0 0 0]';
% J = objJ(x0,rCentroidSide,rCentroidBotA,rCentroidBotB,...
%     rCentroidSlant,uCentroidSide,uCentroidBotA,uCentroidBotB,uCentroidSlant,...
%     sideDotPosVec_cm,botADotPosVec_cm,botBDotPosVec_cm);

s0 = 1;
minFcn = @(s) objJ(updateLaw(s,x0,CoMPos,rCentroidSide,rCentroidBotA,rCentroidBotB,...
    rCentroidSlant,uCentroidSide,uCentroidBotA,uCentroidBotB,uCentroidSlant,...
    sideDotPosVec_cm,botADotPosVec_cm,botBDotPosVec_cm),CoMPos,rCentroidSide,rCentroidBotA,...
    rCentroidBotB,rCentroidSlant,uCentroidSide,uCentroidBotA,uCentroidBotB,uCentroidSlant,...
    sideDotPosVec_cm,botADotPosVec_cm,botBDotPosVec_cm);

for ii = 1:100
    RGB = calculateRotationMatrix(x0(1),x0(2),x0(3));
    RBG = RGB';
    
    CoMPos = snellLeastSquaresPosition(rCentroidSide,rCentroidBotA,...
        rCentroidBotB,rCentroidSlant,uCentroidSide,...
        uCentroidBotA,uCentroidBotB,uCentroidSlant,RBG,...
        sideDotPosVec_cm,botADotPosVec_cm,botBDotPosVec_cm);
   
    for jj = 1:100
%         [xLeft, xRight] = bound(s0, 0.1, 'FunctionHandle', updateLaw);
        xLims = goldenSection(s0,0.1,'FunctionHandle',minFcn);
        s_star = mean(xLims);
        x_star = updateLaw(s_star,x0,CoMPos,rCentroidSide,rCentroidBotA,...
            rCentroidBotB,rCentroidSlant,uCentroidSide,uCentroidBotA,uCentroidBotB,...
            uCentroidSlant,sideDotPosVec_cm,botADotPosVec_cm,botBDotPosVec_cm);
        x0 = x_star;
    end
end

x = [CoMPos;x0];

end

